{"version":3,"sources":["theme.ts","components/TitleBar.tsx","components/Tabs.tsx","Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","useStyles","makeStyles","toolBar","flexDirection","filler","flexGrow","tab","position","alignSelf","display","alignItems","marginLeft","spacing","marginRight","cursor","content","left","right","bottom","height","background","transition","selectedTab","hoverTab","TitleBar","tabs","classes","history","useHistory","AppBar","Toolbar","variant","version","className","map","title","props","Screen","key","path","match","classnames","onClick","push","margin","Tabs","Fragment","Main","useMemo","exact","App","ThemeProvider","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gTAEaA,EAAQC,c,gFCafC,EAAYC,aAAW,SAACH,GAAD,MAAY,CACvCI,QAAS,CACPC,cAAe,OAEjBC,OAAQ,CACNC,SAAU,GAEZC,IAAK,CACHC,SAAU,WACVC,UAAW,UACXC,QAAS,OACTN,cAAe,MACfO,WAAY,SACZC,WAAYb,EAAMc,QAAQ,GAC1BC,YAAaf,EAAMc,QAAQ,GAC3BE,OAAQ,UACR,WAAY,CACVC,QAAS,KACTR,SAAU,WACVS,KAAM,MACNC,MAAO,MACPC,OAAQ,EACRC,OAAQ,EACRC,WAAY,QACZC,WAAY,0BAGhBC,YAAa,CACX,WAAY,CACVN,KAAM,EACNC,MAAO,EACPE,OAAQ,IAGZI,SAAU,CACR,UAAW,CACT,WAAY,CACVP,KAAM,EACNC,MAAO,EACPE,OAAQ,SAMHK,EAAW,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,KACnBC,EAAU1B,IACV2B,EAAUC,cAEhB,OACE,kBAACC,EAAA,EAAD,CAAQtB,SAAS,UACf,kBAACuB,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMC,QAAQ,MAAd,iCAAkDC,KAClD,yBAAKC,UAAWP,EAAQtB,SACvBqB,EAAKS,KAAI,gBAAGC,EAAH,EAAGA,MAAqBC,GAAxB,EAAUC,OAAV,0CACR,kBAAC,IAAD,eAAOC,IAAKF,EAAMG,MAAUH,IACzB,gBAAGI,EAAH,EAAGA,MAAH,OACC,yBACEP,UAAWQ,IACTf,EAAQpB,IADW,eAEhBoB,EAAQJ,YAAuB,MAATkB,GACzBd,EAAQH,UAEVmB,QAAS,kBAAMf,EAAQgB,KAAKP,EAAMG,QAElC,kBAAC,IAAD,KAAOJ,aChEjBnC,EAAYC,aAAW,SAACH,GAAD,MAAY,CACvCiB,QAAS,CACPV,SAAU,EACVuC,OAAQ9C,EAAMc,QAAQ,QAIbiC,EAAO,SAAC,GAAqB,IAAnBpB,EAAkB,EAAlBA,KACfC,EAAU1B,IAEhB,OACE,kBAAC,IAAM8C,SAAP,KACE,kBAAC,EAAD,CAAUrB,KAAMA,IAChB,yBAAKQ,UAAWP,EAAQX,SACtB,kBAAC,IAAD,KACGU,EAAKS,KAAI,cAAGC,MAAH,IAAUE,EAAV,EAAUA,OAAWD,EAArB,yCACR,kBAAC,IAAUA,EACT,kBAACC,EAAD,cC9BDU,EAAO,WAClB,IAAMtB,EAAOuB,mBACX,iBAAM,CACJ,CACEC,OAAO,EACPV,KAAM,IACNJ,MAAO,OACPE,OAAQ,kBAAM,OAEhB,CACEE,KAAM,YACNJ,MAAO,WACPE,OAAQ,kBAAM,OAEhB,CACEE,KAAM,SACNJ,MAAO,kBACPE,OAAQ,kBAAM,OAEhB,CACEE,KAAM,WACNJ,MAAO,mBACPE,OAAQ,kBAAM,UAGlB,IAGF,OAAO,kBAAC,EAAD,CAAMZ,KAAMA,KChBNyB,EARH,kBACV,kBAACC,EAAA,EAAD,CAAerD,MAAOA,GACpB,kBAAC,IAAD,KACE,kBAAC,EAAD,SCEcsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASf,MACvB,2DCbNgB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c8831b45.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles'\n\nexport const theme = createMuiTheme()\n","import React from 'react'\nimport { Route, useHistory } from 'react-router-dom'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Text from '@material-ui/core/Typography'\nimport { makeStyles } from '@material-ui/core/styles'\nimport classnames from 'classnames'\n\nimport { TabInfo } from './Tabs'\nimport { version } from '../../package.json'\n\ninterface Props {\n  tabs: TabInfo[]\n}\n\nconst useStyles = makeStyles((theme) => ({\n  toolBar: {\n    flexDirection: 'row',\n  },\n  filler: {\n    flexGrow: 1,\n  },\n  tab: {\n    position: 'relative',\n    alignSelf: 'stretch',\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    cursor: 'pointer',\n    '&::after': {\n      content: \"''\",\n      position: 'absolute',\n      left: '50%',\n      right: '50%',\n      bottom: 0,\n      height: 3,\n      background: 'white',\n      transition: 'left 0.3s, right 0.3s',\n    },\n  },\n  selectedTab: {\n    '&::after': {\n      left: 0,\n      right: 0,\n      height: 1,\n    },\n  },\n  hoverTab: {\n    '&:hover': {\n      '&::after': {\n        left: 0,\n        right: 0,\n        height: 3,\n      },\n    },\n  },\n}))\n\nexport const TitleBar = ({ tabs }: Props) => {\n  const classes = useStyles()\n  const history = useHistory()\n\n  return (\n    <AppBar position=\"sticky\">\n      <Toolbar>\n        <Text variant=\"h6\">Jack (Yunyang) Sun Portfolio v{version}</Text>\n        <div className={classes.filler} />\n        {tabs.map(({ title, Screen: _, ...props }) => (\n          <Route key={props.path} {...props}>\n            {({ match }) => (\n              <div\n                className={classnames(\n                  classes.tab,\n                  { [classes.selectedTab]: match != null },\n                  classes.hoverTab\n                )}\n                onClick={() => history.push(props.path)}\n              >\n                <Text>{title}</Text>\n              </div>\n            )}\n          </Route>\n        ))}\n      </Toolbar>\n    </AppBar>\n  )\n}\n","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { TitleBar } from './TitleBar'\n\nexport interface TabInfo {\n  exact?: boolean\n  path: string\n  title: string\n  Screen: React.ComponentType\n}\n\ninterface Props {\n  tabs: TabInfo[]\n}\n\nconst useStyles = makeStyles((theme) => ({\n  content: {\n    flexGrow: 1,\n    margin: theme.spacing(1),\n  },\n}))\n\nexport const Tabs = ({ tabs }: Props) => {\n  const classes = useStyles()\n\n  return (\n    <React.Fragment>\n      <TitleBar tabs={tabs} />\n      <div className={classes.content}>\n        <Switch>\n          {tabs.map(({ title, Screen, ...props }) => (\n            <Route {...props}>\n              <Screen />\n            </Route>\n          ))}\n        </Switch>\n      </div>\n    </React.Fragment>\n  )\n}\n","import React, { useMemo } from 'react'\nimport { TabInfo, Tabs } from './components/Tabs'\n\nexport const Main = () => {\n  const tabs = useMemo<TabInfo[]>(\n    () => [\n      {\n        exact: true,\n        path: '/',\n        title: 'Home',\n        Screen: () => null,\n      },\n      {\n        path: '/game-dev',\n        title: 'Game Dev',\n        Screen: () => null,\n      },\n      {\n        path: '/about',\n        title: 'About This Site',\n        Screen: () => null,\n      },\n      {\n        path: '/contact',\n        title: 'Contact / Resume',\n        Screen: () => null,\n      },\n    ],\n    []\n  )\n\n  return <Tabs tabs={tabs} />\n}\n","import React from 'react'\nimport { ThemeProvider } from '@material-ui/core/styles'\nimport { BrowserRouter } from 'react-router-dom'\nimport './App.css'\nimport { theme } from './theme'\nimport { Main } from './Main'\n\nconst App = () => (\n  <ThemeProvider theme={theme}>\n    <BrowserRouter>\n      <Main />\n    </BrowserRouter>\n  </ThemeProvider>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}